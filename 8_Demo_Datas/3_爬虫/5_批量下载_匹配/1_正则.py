# 正则匹配：
'''
一、单字修饰符
    1、 .  匹配任意字符，除了换行符
    2、 [] 表示一组字符，单独列出
    3、 \d 匹配任意数字，等价于[0-9]
    4、 \D 匹配任意非数字
    5、 \w 匹配数字、字母、及下划线
    6、 \W 匹配非数字、非字母、非及下划线
    7、 \s 匹配任意空字符，等同于[\t\n\r\f]
    8、 \s 匹配任意非空字符
'''

'''
二、数字修饰符
    1、 * 匹配0个或多个表达式
    2、 + 匹配1个或多个表达式
    3、 ？匹配0个或1个有前面正则表达式定义的片段(非贪婪匹配)
        非贪婪匹配：尽可能少的匹配
        贪婪匹配：尽可能多的匹配(正则匹配都是贪婪匹配)
    4、 {m}前面的字符出现m次
    5、 {m,}前面的字符至少出现m次
    6、 {m,n}前面的字符出现m~n次
    
    .*?这种匹配方式,非贪婪式匹配还包括：
        .+?　　　　匹配一次
        .??　　　　不匹配
        .{m,n}?   匹配m次
'''

'''
三、边界修饰符：
    1、 ^ 以……开始
    2、 $ 以……结尾
'''

'''
四、分组修饰符
    1、 () 匹配括号内的表达式，也就是一个分组
    2、 \1 \2 匹配第一二个分组内容
'''

'''
五、模式修饰符
    1、 re.S 单行模式
    2、 re.M 多行模式
    3、 re.l 忽略大小写
'''

'''
五、re.compile()
    用于编译正则表达式，生成一个正则表达式Pattern（模式）对象
'''

'''
六、findall()
    在字符串中找到正则表达式匹配的所有字符串，并返回一个列表，如果没有找到匹配的内容返回一个空列表
'''

'''
七、match()、search()和findall()区别
    match()从第一个开始匹配，可以匹配到就像后匹配，第一个匹配不到就会返回一个None
    search()从第一个开始匹配，匹配到就会停止向后面的内容匹配
    findall()从第一个向后匹配，匹配到内容返回一个列表，匹配不到内容返回一个空列表
'''


import re

data='abc123ABC'

print(re.match(r'\d',data))
print(re.search(r'\w',data))
print(re.findall(r'\d',data))








